// Keywords: continuous space, continuous spatial landscape, reprising boundaries

initialize() {
	//make filepath
	defineConstant("OUTDIR","~/Dropbox/spgr/writeup/figs/spatial_pedigree/");

	initializeSLiMOptions(keepPedigrees=T,dimensionality="xy");
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=0.3);
	i1.setInteractionFunction("n", 3.0, 0.1);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.1);
	i2.setInteractionFunction("n", 1, 0.02);
}
1 late() {
	sim.addSubpop("p1", 1e3);
	
	for (ind in p1.individuals)
		ind.setSpatialPosition(p1.pointUniform());
}
1: late() {
	i1.evaluate();
	i2.evaluate();
}
fitness(NULL) {
	totalStrength = i1.totalOfNeighborStrengths(individual);
	return 1.1 - totalStrength / p1.individualCount;
}
1: mateChoice() {
	// spatial mate choice
	return i2.strength(individual);
}
modifyChild() {
	do pos = parent1.spatialPosition + rnorm(2, 0, 0.02);
	while (!p1.pointInBounds(pos));
	child.setSpatialPosition(pos);
	
	return T;
}

late() {
	n = sim.generation;
	print(n);
	allIndividuals = sim.subpopulations.individuals;
	pedID = allIndividuals.pedigreeID;
	parID = allIndividuals.pedigreeParentIDs;
	gparID = allIndividuals.pedigreeGrandparentIDs;
	xy = allIndividuals.spatialPosition;
	for(i in 0:(length(pedID)-1)){
		myoutput = paste(c(pedID[i],
								 parID[(i*2):(i*2+1)],
								 gparID[(i*4):(i*4+3)],
								 xy[(i*2):(i*2+1)]),sep=" ");
	writeFile(paste0(c(OUTDIR,"/gen_output/gen_",n)),myoutput,append=T);
	}
}

100 { }